
import datechooser.model.DateUtils;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Diliru
 */
public class Admin_Lend_Books extends javax.swing.JFrame {

    /**
     * Creates new form lendbooks_JFrame
     */
    public Admin_Lend_Books() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblClose = new javax.swing.JLabel();
        lblMinimize = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblmMemberId = new javax.swing.JLabel();
        txtMemberId = new javax.swing.JTextField();
        btnOkay = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblDueDate = new javax.swing.JLabel();
        txtDueDate = new javax.swing.JTextField();
        lblBookID = new javax.swing.JLabel();
        txtBookID = new javax.swing.JTextField();
        btnLend = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(248, 148, 6));

        lblTitle.setText("Lend Books");

        lblClose.setText("X");
        lblClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCloseMouseClicked(evt);
            }
        });

        lblMinimize.setText("-");
        lblMinimize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblMinimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblMinimizeMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblMinimize)
                .addGap(18, 18, 18)
                .addComponent(lblClose)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTitle)
                        .addComponent(lblClose))
                    .addComponent(lblMinimize, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(44, 62, 80));

        lblmMemberId.setForeground(new java.awt.Color(255, 255, 255));
        lblmMemberId.setText("Enter Member ID");

        btnOkay.setText("Okay");
        btnOkay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOkayMouseClicked(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelMouseClicked(evt);
            }
        });

        lblDueDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDueDate.setText("Due Date");

        txtDueDate.setEditable(false);

        lblBookID.setForeground(new java.awt.Color(255, 255, 255));
        lblBookID.setText("Enter Book Id");

        btnLend.setText("Lend");
        btnLend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLendMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLend))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDueDate)
                                    .addComponent(lblmMemberId)
                                    .addComponent(lblBookID)))
                            .addComponent(btnCancel))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(1, 202, Short.MAX_VALUE)
                                .addComponent(btnOkay))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMemberId, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtBookID)
                                    .addComponent(txtDueDate, javax.swing.GroupLayout.Alignment.TRAILING))))))
                .addGap(46, 46, 46))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBookID))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblmMemberId)
                    .addComponent(txtMemberId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(btnLend)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDueDate))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOkay)
                    .addComponent(btnCancel))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_lblCloseMouseClicked

    private void lblMinimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblMinimizeMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_lblMinimizeMouseClicked

    private void btnOkayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOkayMouseClicked

        Admin_home admin= new Admin_home();
        admin.setVisible(true);
        admin.pack();
        admin.setLocationRelativeTo(null);
        admin.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnOkayMouseClicked

    private void btnCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMouseClicked
        txtBookID.setText("");
        txtDueDate.setText("");
        txtMemberId.setText("");

    }//GEN-LAST:event_btnCancelMouseClicked

    private void btnLendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLendMouseClicked

        String bookID = txtBookID.getText();
        String memberID = txtMemberId.getText();
        
        
        int num;
       
        
        
        
        
        
        if(bookID.equals(""))
        {
            JOptionPane.showMessageDialog(null,"Please enter the ID 0f the book");
        }
        else if(memberID.equals(""))
        {
            JOptionPane.showMessageDialog(null,"Please enter the ID of the member");
        }
     
        
        /*else if(availability==false)
        {
            JOptionPane.showMessageDialog(null,"Book is already lended");
        }
        
        
        else if(num_borrow>=2){
            JOptionPane.showMessageDialog(null,"Member has reachedd the maximum limit of borrowed books");
        }*/
        
        else{
        PreparedStatement ps;
        ResultSet rs;

        //memberID=txtUserName.getText();

        String query="SELECT * FROM `the_app_users` WHERE `u_id` =?";

        try {
            ps=MyConnection.getConnetction().prepareStatement(query);

            ps.setString(1, memberID);

            rs = ps.executeQuery();

            if(rs.next()){
               
                String borrow = rs.getString("borrowed_books"); 
                num = Integer.parseInt(borrow);
                
                if(2<=num){
            JOptionPane.showMessageDialog(null,"Member has reached the maximum limit of borrowed books");
                }
                
                else{
                PreparedStatement ps1;
                ResultSet rs1;

                //book=txtBookName.getText();

                String query1="SELECT * FROM `books` WHERE `book_id` =?";

            try {
                ps1=MyConnection.getConnetction().prepareStatement(query1);

                ps1.setString(1, bookID);

                rs1 = ps1.executeQuery();

            if(rs1.next()){
                
                String available = rs1.getString("book_status");
                
                if(available.equals("available")){
                
                PreparedStatement ps2;
                String query2="INSERT INTO `lended_books`(`book_id`, `member_id`, `lend_date`, `due_date`) VALUES (?,?,?,?)";
        
        try {
            
            LocalDate today = LocalDate.now( ZoneId.of( "Asia/Colombo" ) ) ;
            String todayDate = today.toString() ; 
            
            LocalDate dueDate1 = LocalDate.now( ZoneId.of( "Asia/Colombo" ) ).plusDays(14) ;
            String dueDateReturn = dueDate1.toString() ; 
            
            ps2 = MyConnection.getConnetction().prepareStatement(query2);
            ps2.setString(1, bookID);
            ps2.setString(2, memberID);
            ps2.setString(3, todayDate);
            ps2.setString(4, dueDateReturn);
            
            if(ps2.executeUpdate()>0){
                
           String querymt="UPDATE `books` SET `book_status`=? WHERE `book_id`= '"+bookID+"'";
        
            PreparedStatement pstmt = null;
            try { 
                
                pstmt = MyConnection.getConnetction().prepareStatement(querymt);
                pstmt.setString(1, "Unavailable");
                pstmt.executeUpdate();
                
                
            } catch (SQLException ex) {
                Logger.getLogger(Admin_Search_Book_Details.class.getName()).log(Level.SEVERE, null, ex);
            }     
            
            
            int num2=num+1;
            
            String num3= Integer.toString(num2);
            
            
            String querymt2="UPDATE `the_app_users` SET `borrowed_books`=? WHERE `u_id`= '"+memberID+"'";
        
            PreparedStatement pstmt2 = null;
            try { 
                
                pstmt2 = MyConnection.getConnetction().prepareStatement(querymt2);
                pstmt2.setString(1, num3);
                pstmt2.executeUpdate();
                
                
            } catch (SQLException ex) {
                Logger.getLogger(Admin_Search_Book_Details.class.getName()).log(Level.SEVERE, null, ex);
            }     
                
                
            
            JOptionPane.showMessageDialog(null,"the book has been lended. Please look below for the due date for returning the book");
            
            PreparedStatement ps3;
            ResultSet rs3;
   
    
            String query3="SELECT `due_date` FROM `lended_books` WHERE `book_id` =?";
    
            try {
             ps3=MyConnection.getConnetction().prepareStatement(query3);
             ps3.setString(1, bookID);
             
             rs3 = ps3.executeQuery();
            
             if(rs3.next()){
                 
                 String dueDate = rs3.getString("due_date");
                 txtDueDate.setText(dueDate);
           
             }
                } catch (SQLException ex) {
                 Logger.getLogger(Admin_Add_Members.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(Admin_Add_Members.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            }
                
                else if(available.equals("reserved")){
                    
            PreparedStatement ps4;
            ResultSet rs4;
   
    
            String query4="SELECT `member_id` FROM `reserved_books` WHERE `book_id` =?";
            
            
            try {
             ps4=MyConnection.getConnetction().prepareStatement(query4);
             ps4.setString(1, bookID);
             
             rs4 = ps4.executeQuery();
            
             if(rs4.next()){
                 
                 String resMember = rs4.getString("member_id");
                 
                 if(resMember.equals(memberID)){
                     
                     PreparedStatement ps2;
                String query2="INSERT INTO `lended_books`(`book_id`, `member_id`, `lend_date`, `due_date`) VALUES (?,?,?,?)";
        
        try {
            
            LocalDate today = LocalDate.now( ZoneId.of( "Asia/Colombo" ) ) ;
            String todayDate = today.toString() ; 
            
            LocalDate dueDate1 = LocalDate.now( ZoneId.of( "Asia/Colombo" ) ).plusDays(14) ;
            String dueDateReturn = dueDate1.toString() ; 
            
            ps2 = MyConnection.getConnetction().prepareStatement(query2);
            ps2.setString(1, bookID);
            ps2.setString(2, memberID);
            ps2.setString(3, todayDate);
            ps2.setString(4, dueDateReturn);
            
            if(ps2.executeUpdate()>0){
                
           String querymt="UPDATE `books` SET `book_status`=? WHERE `book_id`= '"+bookID+"'";
        
            PreparedStatement pstmt = null;
            try { 
                
                pstmt = MyConnection.getConnetction().prepareStatement(querymt);
                pstmt.setString(1, "Unavailable");
                pstmt.executeUpdate();
                
                
            } catch (SQLException ex) {
                Logger.getLogger(Admin_Search_Book_Details.class.getName()).log(Level.SEVERE, null, ex);
            }     
            
            
            int num2=num+1;
            
            String num3= Integer.toString(num2);
            
            
            String querymt2="UPDATE `the_app_users` SET `borrowed_books`=? WHERE `u_id`= '"+memberID+"'";
        
            PreparedStatement pstmt2 = null;
            try { 
                
                pstmt2 = MyConnection.getConnetction().prepareStatement(querymt2);
                pstmt2.setString(1, num3);
                pstmt2.executeUpdate();
                
                
            } catch (SQLException ex) {
                Logger.getLogger(Admin_Search_Book_Details.class.getName()).log(Level.SEVERE, null, ex);
            }     
                
                
            
            JOptionPane.showMessageDialog(null,"the book has been lended. Please look below for the due date for returning the book");
            
            PreparedStatement ps3;
            ResultSet rs3;
   
    
            String query3="SELECT `due_date` FROM `lended_books` WHERE `book_id` =?";
    
            try {
             ps3=MyConnection.getConnetction().prepareStatement(query3);
             ps3.setString(1, bookID);
             
             rs3 = ps3.executeQuery();
            
             if(rs3.next()){
                 
                 String dueDate = rs3.getString("due_date");
                 txtDueDate.setText(dueDate);
           
             }
                } catch (SQLException ex) {
                 Logger.getLogger(Admin_Add_Members.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(Admin_Add_Members.class.getName()).log(Level.SEVERE, null, ex);
        }
                 
                 }
                 
                 
                 else{
                 
                 JOptionPane.showMessageDialog(null,"This book is reserved");
                 
                 }
                 
                 
           
             }
                } catch (SQLException ex) {
                 Logger.getLogger(Admin_Add_Members.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                }
                
                
                
                else{
                JOptionPane.showMessageDialog(null,"This book is already lended");
                }

            }
            else{
                JOptionPane.showMessageDialog(null,"This book is not available");
            }

            } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            }

            }
            else{
                JOptionPane.showMessageDialog(null,"This user is not available");
            }

        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
         
        

        
    }//GEN-LAST:event_btnLendMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin_Lend_Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin_Lend_Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin_Lend_Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin_Lend_Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin_Lend_Books().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnLend;
    private javax.swing.JButton btnOkay;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblBookID;
    private javax.swing.JLabel lblClose;
    private javax.swing.JLabel lblDueDate;
    private javax.swing.JLabel lblMinimize;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblmMemberId;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtDueDate;
    private javax.swing.JTextField txtMemberId;
    // End of variables declaration//GEN-END:variables
}
